//* This file is part of the MOOSE framework
//* https://www.mooseframework.org
//*
//* All rights reserved, see COPYRIGHT for full restrictions
//* https://github.com/idaholab/moose/blob/master/COPYRIGHT
//*
//* Licensed under LGPL 2.1, please see LICENSE for details
//* https://www.gnu.org/licenses/lgpl-2.1.html

#pragma once
#include "MeshGenerator.h"

#include "FunctionParserUtils.h"

/**
 * This CutMeshByLevelSetGeneratorBase object is designed to be the base class of mesh generator
 * that cuts a 3D mesh based on a analytic level set function. The level set function could be
 * provided explicitly or indirectly.
 */
class CutMeshByLevelSetGeneratorBase : public MeshGenerator, public FunctionParserUtils<false>
{
public:
  static InputParameters validParams();

  CutMeshByLevelSetGeneratorBase(const InputParameters & parameters);

  std::unique_ptr<MeshBase> generate() override;

  /// An enum class for style of input polygon size
  enum class PointLevelSetRelationIndex : short int
  {
    level_set_out_side = 1,
    level_set_in_side = -1,
    on_level_set = 0
  };

protected:
  /// Name of the input mesh
  const MeshGeneratorName _input_name;
  /// The boundary id of the surface generated by the cut.
  boundary_id_type _cut_face_id;
  /// The boundary name of the surface generated by the cut.
  const BoundaryName _cut_face_name;
  /// Reference to input mesh pointer
  std::unique_ptr<MeshBase> & _input;
  /// function parser object describing the level set
  SymFunctionPtr _func_level_set;

  /**
   * Evaluate the whether a point is on the level set, inside or outside the level set.
   * @param point The point at which the level set function is to be evaluated
   * @return the relation of the point to the level set
   */
  PointLevelSetRelationIndex pointLevelSetRelation(const Point & point);

  /**
   * Calculate the intersection point of a plane and a line segment defined by two points separated
   * by the plane.
   * @param point1 The first point of the line segment
   * @param point2 The second point of the line segment
   * @return the intersection point of the plane and the line segment
   */
  Point pointPairLevelSetInterception(const Point & point1, const Point & point2);

  /**
   * For a TET4 elements crossed by the cutting plane, keep the part of the element on the retaining
   * side of the plane using a number of TET4 elements.
   * @param mesh The mesh to be modified
   * @param bdry_side_list A list that contains the boundary information of the original mesh
   * @param elem_id The id of the element to be cut
   * @param block_id_to_remove The subdomain id of the part of the element to be removed
   * @param new_on_plane_nodes A vector to record the pointers to the newly created nodes on the
   * cutting plane
   */
  void tet4ElemCutter(ReplicatedMesh & mesh,
                      const std::vector<libMesh::BoundaryInfo::BCTuple> & bdry_side_list,
                      const dof_id_type elem_id,
                      const subdomain_id_type & block_id_to_remove,
                      std::vector<const Node *> & new_on_plane_nodes);

  /**
   * Check if a position on a plane has already been used as a node in the mesh. If so, return the
   * pointer to the existing node. If not, create a new node and return the pointer to the new node.
   * @param mesh The mesh to be modified
   * @param new_on_plane_nodes A vector to record the pointers to the newly created nodes on the
   * cutting plane
   * @param new_point The position of the potential new node
   * @return a pointer to the existing node or the newly created node
   */
  const Node * nonDuplicateNodeCreator(ReplicatedMesh & mesh,
                                       std::vector<const Node *> & new_on_plane_nodes,
                                       const Point & new_point);

  /**
   * Evaluate the level set function at a given point.
   * @param point The point at which the level set function is to be evaluated
   * @return the value of the level set function at the given point
   */
  Real levelSetEvaluator(const Point & point);
};
